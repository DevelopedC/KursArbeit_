#pragma once

namespace Logic_game 
{
	class Logics  
	{
	public: // TODO: make it all private
			// Logics 
		    std::vector<Sprite>player_you; // створенн€ масиву спрайту дл€ заповненн€ колоди картами основного гравц€
			std::vector<Sprite>Time_player_cards; //тимчасова зм≥нна, що буде використовуватис€ дл€ карт, що потрапили у в≥дб≥й основного гравц€

			 
			std::vector<Sprite>player_enemy; // створенн€ масиву спрайту дл€ заповненн€ колоди картами ворога
			std::vector<Sprite>Time_EnemyPlayer_cards; // тимчасова зм≥нна, що буде використовуватис€ дл€ карт, що потрапили у в≥дб≥й ворога


			std::vector<int> Cards_player_you; // створенн€ масиву ≥нту дл€ заповненн€ колоди картами основного гравц€
			std::vector<int> Cards_player_enemy; // створенн€ масиву ≥нту дл€ заповненн€ колоди картами ворога

			int X_Pos_card_playerYou = 600 - 98, Y_Pos_card_playerYou = 850; // зм≥нна основного гравц€, що використовуЇтьс€ дл€ зм≥щенн€ карт в колод≥  »грок 1 (€) : пол€ 600,850 начало + 1286 конец по ’, Y_Pos_card_playerYou не измен€етс€
			int X_Pos_card_playerEnemy = 600 - 98, Y_Pos_card_playerEnemy = 100; // зм≥нна противника, що використовуЇтьс€ дл€ зм≥щенн€ карт в колод≥ : пол€ 600,850 начало + 1286 конец по ’, Y_Pos_card_playerYou не измен€етс€


			int NumberOfCards_EnemyPlayer = 7; // зм≥нна л≥чильник к-ст≥ карт в колод≥ основного гравц€									     
			int NumberOfCards_YouPlayer = 7; // зм≥нна л≥чильник к-ст≥ карт в колод≥ ворога

			std::vector<int> Iterator_start = { 1,11,21,31 }; // числовий масив, збер≥гаЇ номера нульових карт, що буде вик. дл€ перев≥рки на в≥дбитт€ карт
			std::vector<int> Iterator_end = { 9,19,29,39 }; // числовий масив, збер≥гаЇ максимальн≥ номера карт, що можуть бути вз€т≥ дл€ колоди карт

		void  Logic_Spawn_card_MyPlayer(int i); // функц≥€, що по правилам з числового масиву бере числа та перетворуЇ њх у карти, та додаЇ до спрайту основного гравц€
												 
		void  Logic_Spawn_card_enemy_1(int i); // функц≥€, що по правилам з числового масиву бере числа та перетворуЇ њх у карти, та додаЇ до спрайту ворога

		int proverka_card_me_player(int time_card); // лог≥ка основного гравц€, що перев≥р€Ї та повертаЇ €кусь одну карту €кою можливо в≥дбити данну карту на пол≥
													 
		int Enemy_Player_turn(); // ф-ц≥€, що повертаЇ випадкову карту, €кою може походити ворог


	};



} 
